// Давайте для примера напишите пипелайн обработки из 3х этапов
// - первый этап: N1 количество горутин генерируют случайные числа с интервалом N2 секунд
//    в каком то диапазоне [a,b] и отправляет в канал 1
// - второй этап: M1 гороутин берут эти числа из канала 1
//    и делают какую то обработку их, например находят все делители этих чисел и отправляют json структуру (число и его делители) в канал 2
// - третий этап: K1 гороутин получают json и выделяют
//    максимальное число переданной на 1вом этапе.
//--программа заканчивает работу после В секунд или если сгеренируется на первом этапе максимальное число с интервала --

package main

import (
	"fmt"
	"math/rand"
	"sync"
	"time"
)

var wg sync.WaitGroup

// - первый этап: N1 количество горутин генерируют случайные числа с интервалом N2 секунд
//    в каком то диапазоне [a,b] и отправляет в канал 1
func numberGeneration(interval int) <-chan int {
	out := make(chan int)
	wg.Add(1)
	go func() {
		time.Sleep(time.Duration(interval))
		num := rand.Intn(10) + 1
		out <- num
		wg.Done()
		defer close(out)
	}()

	return out
}
func main() {
	rand.Seed(time.Now().UnixNano())

	result := numberGeneration(1)
	fmt.Print(<-result)
	wg.Wait()
}
